<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Remote Server Logs</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <style>
        body {
            padding: 20px;
            background-color: #f8f9fa;
        }
        .header {
            background-color: #212529;
            color: white;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
        }
        .log-container {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .log-entry {
            padding: 8px;
            border-bottom: 1px solid #e9ecef;
        }
        .log-entry:nth-child(odd) {
            background-color: #f8f9fa;
        }
        .log-time {
            color: #6c757d;
            font-size: 0.85rem;
        }
        .log-method {
            display: inline-block;
            padding: 2px 6px;
            border-radius: 3px;
            color: white;
            font-weight: bold;
            margin-right: 5px;
        }
        .method-get {
            background-color: #0d6efd;
        }
        .method-post {
            background-color: #198754;
        }
        .method-put {
            background-color: #ffc107;
            color: #212529;
        }
        .method-delete {
            background-color: #dc3545;
        }
        .status-success {
            color: #198754;
        }
        .status-warning {
            color: #ffc107;
        }
        .status-error {
            color: #dc3545;
        }
        .loading {
            text-align: center;
            margin: 20px 0;
        }
        .footer {
            margin-top: 30px;
            text-align: center;
            color: #6c757d;
        }
        .server-info {
            background-color: #e2e3e5;
            padding: 10px;
            border-radius: 5px;
            margin-bottom: 15px;
        }
        .auto-refresh-container {
            margin-bottom: 15px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="d-flex justify-content-between align-items-center">
                <h1>Remote Server Logs</h1>
                <a href="/" class="btn btn-outline-light">Back to Dashboard</a>
            </div>
            <p>Monitoring remote server logs from instance i-04cfe5017444f1ab4</p>
        </div>
        
        <div class="server-info">
            <div class="row">
                <div class="col-md-6">
                    <strong>Remote Server:</strong> <span id="remoteServer">http://54.83.113.89</span>
                </div>
                <div class="col-md-6 text-md-end">
                    <strong>Last Updated:</strong> <span id="lastUpdated">Never</span>
                </div>
            </div>
        </div>
        
        <div class="auto-refresh-container">
            <div class="form-check form-switch">
                <input class="form-check-input" type="checkbox" id="autoRefreshSwitch">
                <label class="form-check-label" for="autoRefreshSwitch">Auto-refresh logs every 30 seconds</label>
            </div>
        </div>
        
        <div class="mb-3">
            <button id="refreshBtn" class="btn btn-primary">
                <span id="refreshIcon" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                Refresh Logs
            </button>
            <button id="clearBtn" class="btn btn-secondary ms-2">Clear Logs</button>
        </div>

        <div class="loading" id="loadingSpinner">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p>Fetching logs from remote server...</p>
        </div>
        
        <div class="log-container">
            <h3>Log Entries</h3>
            <div id="logEntries">
                <p class="text-center text-muted">No logs available. Click "Refresh Logs" to fetch the latest logs.</p>
            </div>
        </div>
        
        <div class="footer">
            <p>Remote Log Monitor Â© 2025</p>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const loadingSpinner = document.getElementById('loadingSpinner');
            const logEntries = document.getElementById('logEntries');
            const refreshBtn = document.getElementById('refreshBtn');
            const clearBtn = document.getElementById('clearBtn');
            const lastUpdated = document.getElementById('lastUpdated');
            const refreshIcon = document.getElementById('refreshIcon');
            const autoRefreshSwitch = document.getElementById('autoRefreshSwitch');
            let autoRefreshInterval = null;
            
            // Format date function
            function formatDate(dateString) {
                const date = new Date(dateString);
                return date.toLocaleString();
            }
            
            // Format log entry function
            function formatLogEntry(log) {
                // Determine status class
                let statusClass = 'status-success';
                if (log.status >= 400) {
                    statusClass = 'status-error';
                } else if (log.status >= 300) {
                    statusClass = 'status-warning';
                }
                
                // Determine method class
                let methodClass = 'method-get';
                switch(log.method.toUpperCase()) {
                    case 'POST':
                        methodClass = 'method-post';
                        break;
                    case 'PUT':
                        methodClass = 'method-put';
                        break;
                    case 'DELETE':
                        methodClass = 'method-delete';
                        break;
                }
                
                return `
                    <div class="log-entry">
                        <div class="log-time">${formatDate(log.timestamp)}</div>
                        <div>
                            <span class="log-method ${methodClass}">${log.method.toUpperCase()}</span>
                            <strong>${log.path}</strong>
                            <span class="${statusClass}">Status: ${log.status}</span>
                        </div>
                        <div>IP: ${log.ip} | Response Time: ${log.responseTime}ms</div>
                    </div>
                `;
            }
            
            // Fetch remote logs
            async function fetchRemoteLogs() {
                loadingSpinner.style.display = 'block';
                refreshIcon.classList.remove('d-none');
                
                try {
                    const response = await fetch('/api/remote-logs');
                    
                    if (!response.ok) {
                        throw new Error(`HTTP error ${response.status}`);
                    }
                    
                    const data = await response.json();
                    
                    // Update last updated time
                    lastUpdated.textContent = formatDate(data.timestamp);
                    
                    // Update log entries
                    if (data.logs && data.logs.length > 0) {
                        let logHtml = '';
                        data.logs.forEach(log => {
                            logHtml += formatLogEntry(log);
                        });
                        logEntries.innerHTML = logHtml;
                    } else {
                        logEntries.innerHTML = '<p class="text-center text-muted">No logs available.</p>';
                    }
                    
                } catch (error) {
                    console.error('Error fetching logs:', error);
                    logEntries.innerHTML = `
                        <div class="alert alert-danger">
                            <h5>Error Fetching Logs</h5>
                            <p>${error.message}</p>
                            <p>Please check that the remote server is running and accessible.</p>
                        </div>
                    `;
                } finally {
                    loadingSpinner.style.display = 'none';
                    refreshIcon.classList.add('d-none');
                }
            }
            
            // Set up event listeners
            refreshBtn.addEventListener('click', fetchRemoteLogs);
            
            clearBtn.addEventListener('click', function() {
                logEntries.innerHTML = '<p class="text-center text-muted">Logs cleared. Click "Refresh Logs" to fetch the latest logs.</p>';
            });
            
            // Auto-refresh functionality
            autoRefreshSwitch.addEventListener('change', function() {
                if (this.checked) {
                    fetchRemoteLogs(); // Fetch immediately when turned on
                    autoRefreshInterval = setInterval(fetchRemoteLogs, 30000); // Then every 30 seconds
                } else {
                    clearInterval(autoRefreshInterval);
                }
            });
            
            // Initial fetch
            fetchRemoteLogs();
        });
    </script>
</body>
</html>
[ec2-user@ip-172-31-47-30 ~]$ rm public/remote-logs.html
[ec2-user@ip-172-31-47-30 ~]$ nano public/remote-logs.html
[ec2-user@ip-172-31-47-30 ~]$ nano public/css/server-status.css
[ec2-user@ip-172-31-47-30 ~]$ nano public/js/remote-logs.js
[ec2-user@ip-172-31-47-30 ~]$ nano public/index.html
[ec2-user@ip-172-31-47-30 ~]$ cat public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IP Address Checker</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/css/bootstrap.min.css">
    <style>
        body {
            padding: 20px;
            background-color: #f8f9fa;
        }
        .header {
            background-color: #212529;
            color: white;
            padding: 15px;
            margin-bottom: 20px;
            border-radius: 5px;
        }
        .ip-form {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        .results {
            background-color: white;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
        .malicious {
            color: #dc3545;
            font-weight: bold;
        }
        .safe {
            color: #198754;
            font-weight: bold;
        }
        #map {
            height: 300px;
            margin-top: 20px;
            border-radius: 5px;
        }
        .loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }
        .footer {
            margin-top: 30px;
            text-align: center;
            color: #6c757d;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>IP Address Checker</h1>
            <p>Check if an IP address is malicious and view its geographical information</p>
        </div>
        
        <div class="row">
            <div class="col-md-6">
                <div class="ip-form">
                    <h3>Check an IP Address</h3>
                    <form id="ipCheckForm">
                        <div class="mb-3">
                            <label for="ipAddress" class="form-label">IP Address</label>
                            <input type="text" class="form-control" id="ipAddress" 
                                   placeholder="Enter IP address (e.g., 8.8.8.8)" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Check IP</button>
                    </form>
                    <div class="loading" id="loadingSpinner">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p>Processing...</p>
                    </div>
                </div>
                
                <div class="ip-form">
                    <h3>Report Malicious IP</h3>
                    <form id="reportForm">
                        <div class="mb-3">
                            <label for="reportIpAddress" class="form-label">Malicious IP Address</label>
                            <input type="text" class="form-control" id="reportIpAddress" 
                                   placeholder="Enter malicious IP address" required>
                        </div>
                        <button type="submit" class="btn btn-danger">Report IP</button>
                    </form>
                    <div id="reportResult" class="mt-3"></div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="results" id="results" style="display: none;">
                    <h3>Results</h3>
                    <div id="statusResult"></div>
                    <hr>
                    <h4>IP Information</h4>
                    <table class="table">
                        <tbody>
                            <tr>
                                <th>IP Address</th>
                                <td id="resultIp"></td>
                            </tr>
                            <tr>
                                <th>Country</th>
                                <td id="resultCountry"></td>
                            </tr>
                            <tr>
                                <th>City</th>
                                <td id="resultCity"></td>
                            </tr>
                            <tr>
                                <th>Coordinates</th>
                                <td id="resultCoords"></td>
                            </tr>
                        </tbody>
                    </table>
                    <div id="map"></div>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>IP Checker Service Â© 2025</p>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.3.0/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.9.4/leaflet.css">
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // IP Check Form
            const ipCheckForm = document.getElementById('ipCheckForm');
            const loadingSpinner = document.getElementById('loadingSpinner');
            const results = document.getElementById('results');
            const statusResult = document.getElementById('statusResult');
            const resultIp = document.getElementById('resultIp');
            const resultCountry = document.getElementById('resultCountry');
            const resultCity = document.getElementById('resultCity');
            const resultCoords = document.getElementById('resultCoords');
            let map = null;
            
            ipCheckForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const ipAddress = document.getElementById('ipAddress').value.trim();
                
                if (!ipAddress) {
                    alert('Please enter an IP address');
                    return;
                }
                
                // Show loading spinner
                loadingSpinner.style.display = 'block';
                results.style.display = 'none';
                
                try {
                    const response = await fetch('/api/check-ip', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ ipAddress })
                    });
                    
                    const data = await response.json();
                    
                    // Hide loading spinner
                    loadingSpinner.style.display = 'none';
                    
                    // Show results
                    results.style.display = 'block';
                    
                    // Update status
                    if (data.isMalicious) {
                        statusResult.innerHTML = `<div class="alert alert-danger">
                            <h4 class="alert-heading">WARNING: Malicious IP Detected!</h4>
                            <p>This IP address has been identified as potentially malicious.</p>
                        </div>`;
                    } else {
                        statusResult.innerHTML = `<div class="alert alert-success">
                            <h4 class="alert-heading">Safe IP Address</h4>
                            <p>No threats detected for this IP address.</p>
                        </div>`;
                    }
                    
                    // Update IP info
                    const features = data.features;
                    resultIp.textContent = features.IP;
                    resultCountry.textContent = features.Country || 'Unknown';
                    resultCity.textContent = features.City || 'Unknown';
                    
                    if (features.Latitude && features.Longitude) {
                        resultCoords.textContent = `${features.Latitude}, ${features.Longitude}`;
                        
                        // Initialize or update map
                        if (!map) {
                            map = L.map('map').setView([features.Latitude, features.Longitude], 10);
                            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                            }).addTo(map);
                        } else {
                            map.setView([features.Latitude, features.Longitude], 10);
                        }
                        
                        // Add marker
                        L.marker([features.Latitude, features.Longitude])
                            .addTo(map)
                            .bindPopup(`<b>${features.IP}</b><br>${features.City || ''}, ${features.Country || 'Unknown'}`)
                            .openPopup();
                    } else {
                        resultCoords.textContent = 'Unknown';
                        document.getElementById('map').style.display = 'none';
                    }
                    
                } catch (error) {
                    console.error('Error:', error);
                    loadingSpinner.style.display = 'none';
                    alert('Error checking IP. Please try again.');
                }
            });
            
            // Report Form
            const reportForm = document.getElementById('reportForm');
            const reportResult = document.getElementById('reportResult');
            
            reportForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const ipAddress = document.getElementById('reportIpAddress').value.trim();
                
                if (!ipAddress) {
                    alert('Please enter an IP address');
                    return;
                }
                
                try {
                    const response = await fetch('/api/add-malicious-ip', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ ipAddress })
                    });
                    
                    const data = await response.json();
                    
                    if (data.success) {
                        reportResult.innerHTML = `<div class="alert alert-success">
                            ${data.message}
                        </div>`;
                    } else {
                        reportResult.innerHTML = `<div class="alert alert-warning">
                            ${data.message}
                        </div>`;
                    }
                    
                    // Clear form
                    document.getElementById('reportIpAddress').value = '';
                    
                } catch (error) {
                    console.error('Error:', error);
                    reportResult.innerHTML = `<div class="alert alert-danger">
                        Error submitting IP. Please try again.
                    </div>`;
                }
            });
        });
    </script>
</body>
</html>
